#------------------------------------------------------------------------------
# Copyright (c) 2013, Nucleic Development Team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
#------------------------------------------------------------------------------
""" An example of the `ImageView` widget.

This example shows how a PNG image (in an enaml Image object) can displayed.

<< autodoc-me >>
"""
import os

from enaml.icon import Icon,IconImage
from enaml.image import Image
from enaml.layout.api import vbox, hbox, spacer
from enaml.widgets.api import Window, Container, ComboBox, ImageView,PushButton

from barnav.api import load_icon2



def image_path(name):
    dirname = os.path.dirname(__file__)
    return os.path.join(dirname, 'images', name)


IMAGES = {
    'Image A': Image(data=open(image_path('img1.png'), 'rb').read()),
    'Image B': Image(data=open(image_path('img2.png'), 'rb').read()),
    'Image C': Image(data=open(image_path('img3.png'), 'rb').read()),
}



iconimage_path = os.path.join(os.path.dirname(__file__), 'images')



WELCOM_ICON =  load_icon2(iconimage_path,'welcome','welcomes')

DICOMRT_ICON = load_icon2(iconimage_path,'dicomrt','dicomrts')

TRAJECTORY_ICON = load_icon2(iconimage_path,'trajectory','trajectorys')

CLOUDMCSIM_ICON = load_icon2(iconimage_path,'cloudmcsim','cloudmcsims')



enamldef Main(Window):


    Container:
        constraints = [
            vbox(hbox(pt1,pt2,pt3,pt4,spacer),
                 hbox(cbox, spacer), 
                 img),
        ]
       
        PushButton: pt1:
          #  text = 'Push Me'
            icon = WELCOM_ICON
            icon_size = (48,48)
            clicked :: print 'I was clicked!'

        PushButton: pt2:
            #text = 'Toggle Me'
            icon = DICOMRT_ICON
            icon_size = (48,48)
            checkable = True
            toggled :: print 'I was toggled'
         
        PushButton: pt3:
           # text = 'Push Me'
            icon = TRAJECTORY_ICON
            icon_size = (48,48)
            clicked :: print 'I was clicked!'

        PushButton: pt4:
           # text = 'Push Me'
            icon = CLOUDMCSIM_ICON
            icon_size = (48,48)
            clicked :: print 'I was clicked!'

        ComboBox: cbox:
            items = sorted(IMAGES.keys())
            index = 0
        ImageView: img:
            image << IMAGES[cbox.selected_item]
